#include "lre3_bindings.h"

void AddScancodeGlobals()
{
    ADD_SCANCODE("SCANCODE_A", SDL_SCANCODE_A);
    ADD_SCANCODE("SCANCODE_B", SDL_SCANCODE_B);
    ADD_SCANCODE("SCANCODE_C", SDL_SCANCODE_C);
    ADD_SCANCODE("SCANCODE_D", SDL_SCANCODE_D);
    ADD_SCANCODE("SCANCODE_E", SDL_SCANCODE_E);
    ADD_SCANCODE("SCANCODE_F", SDL_SCANCODE_F);
    ADD_SCANCODE("SCANCODE_G", SDL_SCANCODE_G);
    ADD_SCANCODE("SCANCODE_H", SDL_SCANCODE_H);
    ADD_SCANCODE("SCANCODE_I", SDL_SCANCODE_I);
    ADD_SCANCODE("SCANCODE_J", SDL_SCANCODE_J);
    ADD_SCANCODE("SCANCODE_K", SDL_SCANCODE_K);
    ADD_SCANCODE("SCANCODE_L", SDL_SCANCODE_L);
    ADD_SCANCODE("SCANCODE_M", SDL_SCANCODE_M);
    ADD_SCANCODE("SCANCODE_N", SDL_SCANCODE_N);
    ADD_SCANCODE("SCANCODE_O", SDL_SCANCODE_O);
    ADD_SCANCODE("SCANCODE_P", SDL_SCANCODE_P);
    ADD_SCANCODE("SCANCODE_Q", SDL_SCANCODE_Q);
    ADD_SCANCODE("SCANCODE_R", SDL_SCANCODE_R);
    ADD_SCANCODE("SCANCODE_S", SDL_SCANCODE_S);
    ADD_SCANCODE("SCANCODE_T", SDL_SCANCODE_T);
    ADD_SCANCODE("SCANCODE_U", SDL_SCANCODE_U);
    ADD_SCANCODE("SCANCODE_V", SDL_SCANCODE_V);
    ADD_SCANCODE("SCANCODE_W", SDL_SCANCODE_W);
    ADD_SCANCODE("SCANCODE_X", SDL_SCANCODE_X);
    ADD_SCANCODE("SCANCODE_Y", SDL_SCANCODE_Y);
    ADD_SCANCODE("SCANCODE_Z", SDL_SCANCODE_Z);

    ADD_SCANCODE("SCANCODE_1", SDL_SCANCODE_1);
    ADD_SCANCODE("SCANCODE_2", SDL_SCANCODE_2);
    ADD_SCANCODE("SCANCODE_3", SDL_SCANCODE_3);
    ADD_SCANCODE("SCANCODE_4", SDL_SCANCODE_4);
    ADD_SCANCODE("SCANCODE_5", SDL_SCANCODE_5);
    ADD_SCANCODE("SCANCODE_6", SDL_SCANCODE_6);
    ADD_SCANCODE("SCANCODE_7", SDL_SCANCODE_7);
    ADD_SCANCODE("SCANCODE_8", SDL_SCANCODE_8);
    ADD_SCANCODE("SCANCODE_9", SDL_SCANCODE_9);
    ADD_SCANCODE("SCANCODE_0", SDL_SCANCODE_0);

    ADD_SCANCODE("SCANCODE_RETURN", SDL_SCANCODE_RETURN);
    ADD_SCANCODE("SCANCODE_ESCAPE", SDL_SCANCODE_ESCAPE);
    ADD_SCANCODE("SCANCODE_BACKSPACE", SDL_SCANCODE_BACKSPACE);
    ADD_SCANCODE("SCANCODE_TAB", SDL_SCANCODE_TAB);
    ADD_SCANCODE("SCANCODE_SPACE", SDL_SCANCODE_SPACE);

    ADD_SCANCODE("SCANCODE_MINUS", SDL_SCANCODE_MINUS);
    ADD_SCANCODE("SCANCODE_EQUALS", SDL_SCANCODE_EQUALS);
    ADD_SCANCODE("SCANCODE_LEFTBRACKET", SDL_SCANCODE_LEFTBRACKET);
    ADD_SCANCODE("SCANCODE_RIGHTBRACKET", SDL_SCANCODE_RIGHTBRACKET);
    ADD_SCANCODE("SCANCODE_BACKSLASH", SDL_SCANCODE_BACKSLASH);
    ADD_SCANCODE("SCANCODE_NONUSHASH", SDL_SCANCODE_NONUSHASH);
    ADD_SCANCODE("SCANCODE_SEMICOLON", SDL_SCANCODE_SEMICOLON);
    ADD_SCANCODE("SCANCODE_APOSTROPHE", SDL_SCANCODE_APOSTROPHE);
    ADD_SCANCODE("SCANCODE_GRAVE", SDL_SCANCODE_GRAVE);
    ADD_SCANCODE("SCANCODE_COMMA", SDL_SCANCODE_COMMA);
    ADD_SCANCODE("SCANCODE_PERIOD", SDL_SCANCODE_PERIOD);
    ADD_SCANCODE("SCANCODE_SLASH", SDL_SCANCODE_SLASH);

    ADD_SCANCODE("SCANCODE_CAPSLOCK", SDL_SCANCODE_CAPSLOCK);

    ADD_SCANCODE("SCANCODE_F1", SDL_SCANCODE_F1);
    ADD_SCANCODE("SCANCODE_F2", SDL_SCANCODE_F2);
    ADD_SCANCODE("SCANCODE_F3", SDL_SCANCODE_F3);
    ADD_SCANCODE("SCANCODE_F4", SDL_SCANCODE_F4);
    ADD_SCANCODE("SCANCODE_F5", SDL_SCANCODE_F5);
    ADD_SCANCODE("SCANCODE_F6", SDL_SCANCODE_F6);
    ADD_SCANCODE("SCANCODE_F7", SDL_SCANCODE_F7);
    ADD_SCANCODE("SCANCODE_F8", SDL_SCANCODE_F8);
    ADD_SCANCODE("SCANCODE_F9", SDL_SCANCODE_F9);
    ADD_SCANCODE("SCANCODE_F10", SDL_SCANCODE_F10);
    ADD_SCANCODE("SCANCODE_F11", SDL_SCANCODE_F11);
    ADD_SCANCODE("SCANCODE_F12", SDL_SCANCODE_F12);

    ADD_SCANCODE("SCANCODE_PRINTSCREEN", SDL_SCANCODE_PRINTSCREEN);
    ADD_SCANCODE("SCANCODE_SCROLLLOCK", SDL_SCANCODE_SCROLLLOCK);
    ADD_SCANCODE("SCANCODE_PAUSE", SDL_SCANCODE_PAUSE);
    ADD_SCANCODE("SCANCODE_INSERT", SDL_SCANCODE_INSERT);
    ADD_SCANCODE("SCANCODE_HOME", SDL_SCANCODE_HOME);
    ADD_SCANCODE("SCANCODE_PAGEUP", SDL_SCANCODE_PAGEUP);
    ADD_SCANCODE("SCANCODE_DELETE", SDL_SCANCODE_DELETE);
    ADD_SCANCODE("SCANCODE_END", SDL_SCANCODE_END);
    ADD_SCANCODE("SCANCODE_PAGEDOWN", SDL_SCANCODE_PAGEDOWN);
    ADD_SCANCODE("SCANCODE_RIGHT", SDL_SCANCODE_RIGHT);
    ADD_SCANCODE("SCANCODE_LEFT", SDL_SCANCODE_LEFT);
    ADD_SCANCODE("SCANCODE_DOWN", SDL_SCANCODE_DOWN);
    ADD_SCANCODE("SCANCODE_UP", SDL_SCANCODE_UP);
}

FBIND(LRE3Input, GetKeystate)
{
    GET_SELF(LRE3Input);
    GET_NUMBER(scancode, 2);
    PUSH_BOOL((bool)self->keyboard[(int)scancode]);
    return 1;
}

FBIND(LRE3Input, GetMouseRel)
{
    GET_SELF(LRE3Input);
    PUSH_NUMBER((double)self->xrel);
    PUSH_NUMBER((double)self->yrel);
    return 2;
}

FBIND(LRE3Input, GetLMouseDown)
{
    GET_SELF(LRE3Input);
    PUSH_BOOL(self->bLeftMouseDown);
    return 1;
}

FBIND(LRE3Input, GetRMouseDown)
{
    GET_SELF(LRE3Input);
    PUSH_BOOL(self->bRightMouseDown);
    return 1;
}

FBIND(LRE3Input, GetInput)
{
    PUSH_UDATA(&LRE3EngineSubsystems::Instance().input, LRE3Input);
    return 1;
}

LIB(LRE3Input) = {
    {"get_input", FNAME(LRE3Input, GetInput)},
    {"get_keystate", FNAME(LRE3Input, GetKeystate)},
    {"get_mouse_rel", FNAME(LRE3Input, GetMouseRel)},
    {"get_lmouse_down", FNAME(LRE3Input, GetLMouseDown)},
    {"get_rmouse_down", FNAME(LRE3Input, GetRMouseDown)},
    {NULL, NULL}
};
LOPEN(LRE3Input)